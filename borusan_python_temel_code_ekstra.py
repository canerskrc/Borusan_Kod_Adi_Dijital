# -*- coding: utf-8 -*-
"""Borusan.code

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hhfBpkrEwrKHqN-b87y7n-vuyTfM5dgD

#DEĞİŞKENLER
"""

# Example 1 — Naming & intent (finance reporting)
report_date: str = "2025-08-27"  # YYYY-MM-DD
DAILY_EXCHANGE_ENDPOINT = "https://api.internal/exchange"  # UPPER for constants

# Example 2 — Multiple assignment with clear names (telecom KPI)
call_success_rate, dropped_calls = 0.992, 37

# Example 3 — Tuple unpacking (A/B test metrics)
conversion_A, conversion_B = (0.181, 0.194)

# Example 4 — Throwaway underscore (IoT sensor tuple)
_, longitude, latitude = ("device-441", 29.123, 41.029)

# Example 5 — Star unpacking for head/body/tail (log parsing)
ts, level, *message = ["2025-08-27T10:22:00Z", "WARN", "High", "latency", "on", "pod-7"]

# Example 6 — Walrus operator for inline assignment (security gating)
if (user_role := "analyst") in {"admin", "analyst"}:
    access_granted = True

# Example 7 — Path variables with pathlib (data contracts)
from pathlib import Path
RAW_DIR = Path("data/raw"); CURATED_DIR = Path("data/curated")

# Example 8 — Environment variables with default (cloud deploy)
import os
REGION = os.getenv("REGION", "eu-central-1")

# Example 9 — F-strings with format specifiers (billing)
unit_price, qty = 12.5, 240
summary = f"Amount: {(unit_price*qty):,.2f} USD"  # 'Amount: 3,000.00 USD'

# Example 10 — Readable booleans (privacy feature flags)
is_gdpr_enabled: bool = True
should_mask_pii: bool = is_gdpr_enabled

# Example 11 — None as data, explicit checks (healthcare)
last_vital_sign = None
if last_vital_sign is None:
    last_vital_sign = {"hr": 72}

# Example 12 — Descriptive interim variables (ML feature engineering)
raw_age = "34"
age: int = int(raw_age)

# Example 13 — Immutable configuration via mapping
CONFIG = {"retry": 3, "timeout_s": 5}  # keep small and explicit

# Example 14 — Defensive copy when sharing dict/list
baseline = {"sla_ms": 120}
plan = dict(baseline)  # copy to avoid accidental mutation

# Example 15 — Upper/lower snake for domain language
kafka_topic_order_events = "order.events.v1"

# Example 16 — Identity vs equality (data pipeline guards)
x = [1,2,3]; y = x; z = [1,2,3]
same_object = (x is y)      # True
same_value  = (x == z)      # True

# Example 17 — Shadowing avoidance (never re-use builtins)
list_of_ids = [101, 102]  # not 'list'

# Example 18 — Precise units in var names (observability)
latency_ms: int = 87
throughput_rps: float = 231.4

# Example 19 — Pattern matching for config variants
def region_url(region: str) -> str:
    match region:
        case "eu": return "https://eu.api.service"
        case "us": return "https://us.api.service"
        case _:    return "https://global.api.service"
base_url = region_url("eu")

# Example 20 — Dataclass for cohesive variables (pricing)
from dataclasses import dataclass
@dataclass(frozen=True)
class Price:
    currency: str
    amount: float
EUR_10 = Price("EUR", 10.0)

# Example 21 — Typed aliases to clarify intent
from typing import NewType
UserId = NewType("UserId", int)
uid: UserId = UserId(123)

# Example 22 — Sane defaults via functions (config factory)
def default_headers() -> dict[str, str]:
    return {"X-Trace": "on"}
headers = default_headers()

# Example 23 — Constant lookup tables (risk scoring)
RISK_BY_SEGMENT = {"retail": 1, "smb": 2, "enterprise": 3}

# Example 24 — Reading small JSON config safely
import json
config_text = '{"rerank": true, "k": 20}'
cfg = json.loads(config_text) if config_text.strip() else {}

# Example 25 — Units conversion (energy metering)
kw = 3.2
watt = kw * 1000

# Example 26 — Epoch seconds to datetime (auditing)
from datetime import datetime, timezone
ts = 1724745600
ts_dt = datetime.fromtimestamp(ts, tz=timezone.utc)

# Example 27 — Explicit temporary names aid refactoring
tmp_total_orders = 152_001
orders_total = tmp_total_orders; del tmp_total_orders

# Example 28 — Guarded imports for optional features
try:
    import orjson as fastjson
except Exception:  # pragma: no cover
    fastjson = None

# Example 29 — Use constants for magic numbers
MAX_RETRIES = 3
for attempt in range(1, MAX_RETRIES+1):
    pass

# Example 30 — Readable slicing (ETL windows)
last_7 = list(range(1,31))[-7:]

# Example 31 — Swapping without temp
low, high = 10, 99
low, high = high, low

# Example 32 — Bit flags (embedded/gaming)
READ, WRITE, EXEC = 1, 2, 4
perm = READ | WRITE

# Example 33 — Clear fallbacks (marketing experiments)
variant = None
active_variant = variant or "control"

# Example 34 — Explicit encoding declaration when needed
sample_bytes = "çğüşöİ".encode("utf-8")

# Example 35 — Precise rounding strategy (finance)
amount = round(10.015, 2)  # bankers' rounding caveat

# Example 36 — Decimal for money
from decimal import Decimal, ROUND_HALF_UP
price = Decimal("10.015").quantize(Decimal("0.01"), rounding=ROUND_HALF_UP)

# Example 37 — Avoid long expressions: stage them
base = 1200; tax = 0.18; discount = 0.15
gross = base * (1 + tax); net = gross * (1 - discount)

# Example 38 — Explicit None-aware coalesce
maybe_id: int | None = None
effective_id = maybe_id if maybe_id is not None else -1

# Example 39 — Sentinel object for API defaults
_sentinel = object()
def read(limit=_sentinel):
    if limit is _sentinel:
        limit = 100
    return limit

# Example 40 — Structured logging fields (observability)
log_fields = {"event": "order_placed", "order_id": 93421, "source": "web"}

"""#Veri Tipleri"""

# Example 1 — int/float/complex (signal processing)
samples = 1024
sampling_rate_hz = 44_100.0
phasor = complex(0, 1)  # i

# Example 2 — bool and None (feature flagging)
is_beta_enabled: bool = True
upstream_status = None  # treat None explicitly

# Example 3 — str with normalization (i18n)
name = "İstanbul".casefold()  # locale-friendly lower

# Example 4 — bytes vs str (networking)
payload_bytes = b"PING"; payload_text = "PING"

# Example 5 — list operations (backlog grooming)
tasks = ["fix-latency", "add-metrics"]; tasks.append("refactor-ingest")

# Example 6 — tuple for fixed records (coordinates)
point: tuple[float, float] = (41.01, 29.0)

# Example 7 — set for uniqueness (CRM dedupe)
emails = {"a@x.com", "b@x.com"}; emails.add("b@x.com")  # unchanged

# Example 8 — dict for mappings (feature toggles)
flags: dict[str, bool] = {"ab_new_banner": True}

# Example 9 — dict get with default (safe reads)
retries = flags.get("unknown", False)

# Example 10 — dict comprehension (ETL rename)
cols = ["cust_id","order_id"]; rename = {c: c.upper() for c in cols}

# Example 11 — NamedTuple (lightweight record)
from typing import NamedTuple
class Point(NamedTuple):
    x: float; y: float
p = Point(1.2, 3.4)

# Example 12 — dataclass (domain entity)
from dataclasses import dataclass
@dataclass(slots=True)
class Customer:
    id: int; name: str; is_vip: bool = False
c1 = Customer(1, "Ada Lovelace")

# Example 13 — Enum for finite states (order)
from enum import Enum, auto
class OrderState(Enum):
    PENDING = auto(); PAID = auto(); SHIPPED = auto()
state = OrderState.PAID

# Example 14 — datetime and timezone (auditing)
from datetime import datetime, timezone
now_utc = datetime.now(tz=timezone.utc)

# Example 15 — timedelta arithmetic (SLA)
from datetime import timedelta
sla = timedelta(minutes=5); breach = now_utc + sla

# Example 16 — Decimal for money (accounting)
from decimal import Decimal
total = Decimal("19.99") * 3

# Example 17 — Fraction for exact ratios (scheduling)
from fractions import Fraction
ratio = Fraction(2, 3) + Fraction(1, 6)

# Example 18 — Pathlib (data lakes)
from pathlib import Path
root = Path("/data/lake"); exists = root.exists()

# Example 19 — Counter (analytics)
from collections import Counter
hits = Counter(["/","/","/metrics"])

# Example 20 — defaultdict (grouping)
from collections import defaultdict
groups: dict[str, list[int]] = defaultdict(list)
for k, v in [("a",1),("a",2),("b",3)]: groups[k].append(v)

# Example 21 — array (binary data buffers)
from array import array
buf = array('I', [1,2,3])

# Example 22 — memoryview (zero-copy slices)
mv = memoryview(b'abcdef'); view = mv[2:4]

# Example 23 — JSON roundtrip (APIs)
import json
obj = {"ok": True}; data = json.dumps(obj); back = json.loads(data)

# Example 24 — typing.Optional and unions
from typing import Optional
maybe_score: Optional[float] = None
id_or_name: int | str = "x42"

# Example 25 — Frozen set for constants
PERMS = frozenset({"read","write"})

# Example 26 — Dict keys/values/views are dynamic
kview = flags.keys()  # live view

# Example 27 — Shallow vs deep copy
import copy
a = {"x": [1,2]}; b = copy.copy(a); c = copy.deepcopy(a)

# Example 28 — Sorting with key (HR)
cands = [{"name":"Ayşe","score":87},{"name":"Ali","score":92}]
top = sorted(cands, key=lambda x: (-x["score"], x["name"]))

# Example 29 — Bytes/bytearray mutate vs not
ba = bytearray(b"abc"); ba[0] = ord('A')

# Example 30 — Struct for binary protocols
import struct
packed = struct.pack("!I", 1024)  # network byte order

# Example 31 — Dataclass as dict (for JSON)
from dataclasses import asdict
as_jsonable = asdict(c1)

# Example 32 — Type casting vs validation
raw = "42"
value = int(raw)  # may raise ValueError

# Example 33 — Safe get chain (nested config)
cfg = {"db":{"host":"localhost"}}
host = cfg.get("db",{}).get("host")

# Example 34 — Set operations (risk intersection)
allowed = {"read","write"}; requested = {"write","delete"}
effective = allowed & requested  # {'write'}

# Example 35 — Dict merge (3.9+)
a = {"x":1}; b = {"y":2}; merged = a | b

# Example 36 — Immutability by convention
API_VERSION = "v1"  # don't reassign

# Example 37 — Type aliases for clarity
from typing import TypeAlias
JSONDict: TypeAlias = dict[str, "JSON"]
JSON = int | float | str | bool | None | JSONDict | list["JSON"]

# Example 38 — Pattern matching on data types
def describe(x: object) -> str:
    match x:
        case int(): return "int"
        case str(): return "str"
        case list(): return "list"
        case _: return "other"

# Example 39 — Datetime parsing & formatting
from datetime import datetime
dt = datetime.strptime("2025-08-27", "%Y-%m-%d").strftime("%d.%m.%Y")

# Example 40 — Pydantic-like validation (lightweight)
def ensure_positive(n: int) -> int:
    if n <= 0: raise ValueError("must be > 0")
    return n

"""#Döngüler"""

# Example 1 — Basic for over list (ops runbook)
steps = ["backup","migrate","verify"]
for step in steps:
    pass

# Example 2 — Range with start/stop/step (pagination)
for page in range(1, 11, 2):
    pass

# Example 3 — enumerate with start index (UX A/B)
for idx, variant in enumerate(["control","treatment"], start=1):
    pass

# Example 4 — zip to iterate in lockstep (pricing tiers)
tiers = ["basic","pro","enterprise"]; prices = [9,29,99]
for tier, price in zip(tiers, prices):
    pass

# Example 5 — dict items (observability labels)
labels = {"env":"prod","region":"eu"}
for k, v in labels.items():
    pass

# Example 6 — while with sentinel (polling)
retries = 0; MAX = 3
while retries < MAX:
    retries += 1
    if True: break

# Example 7 — break/continue/else (fraud scan)
for tx in [10, 2000, 15]:
    if tx > 1000:
        break
else:
    pass  # no fraud

# Example 8 — List comprehension (etl mapping)
squares = [x*x for x in range(10)]

# Example 9 — Dict comprehension (invert map)
inv = {v: k for k, v in {"tr":"Türkiye","de":"Almanya"}.items()}

# Example 10 — Set comprehension (unique country codes)
uniq = {c[:2] for c in ["TR","TR","DE"]}

# Example 11 — Generator expression (streaming)
total = sum(x*x for x in range(1_000))

# Example 12 — Nested loops with early exit (routing)
routes = [["A","B","C"],["D","E"]]
found = None
for r in routes:
    for stop in r:
        if stop == "B": found = r; break
    if found: break

# Example 13 — File iteration (large logs)
for line in open(_file_, "r", encoding="utf-8"):
    if line.strip().startswith("#"): continue

# Example 14 — Batching (marketing emails)
def batched(iterable, size):
    buf = []
    for item in iterable:
        buf.append(item)
        if len(buf) == size:
            yield buf; buf = []
    if buf: yield buf
for batch in batched(range(10), 3):
    pass

# Example 15 — Sliding window (time series)
def windows(seq, k):
    for i in range(len(seq)-k+1):
        yield seq[i:i+k]
for w in windows([1,2,3,4,5], 3):
    pass

# Example 16 — Retry with exponential backoff (pseudo)
attempt = 0
while attempt < 3:
    attempt += 1
    # try op
    break

# Example 17 — Loop over dict of lists (group ops)
groups = {"A":[1,2], "B":[3]}
for g, items in groups.items():
    for it in items:
        pass

# Example 18 — Any/All as loop substitutes
has_high = any(x > 90 for x in [10, 55, 99])

# Example 19 — Product of iterables (cartesian)
from itertools import product
combos = list(product(["S","M"], ["Red","Blue"]))

# Example 20 — Chain multiple iterables
from itertools import chain
all_items = list(chain([1,2],[3,4]))

# Example 21 — Groupby (sorted prerequisite)
from itertools import groupby
data = sorted([("TR",1),("DE",2),("TR",3)])
grouped = {k: [v for _,v in vals] for k, vals in groupby(data, key=lambda x: x[0])}

# Example 22 — Counting with Counter
from collections import Counter
counts = Counter(["error","ok","error"])

# Example 23 — Progress-ish (manual)
for i in range(0, 101, 20):
    _ = i  # update

# Example 24 — Filtered loop (inventory)
for sku in [("A",0),("B",5),("C",2)]:
    if sku[1] == 0: continue

# Example 25 — Map + filter via comprehensions
names = ["ali","Ayşe","can"]
normalized = [n.title() for n in names if len(n)>2]

# Example 26 — Loop over API pages (pseudo)
page = 1
while True:
    # fetch(page)
    if page >= 3: break
    page += 1

# Example 27 — For/else used correctly (search)
for n in [2,4,6,8]:
    if n == 5: break
else:
    not_found = True

# Example 28 — Dedup while preserving order
seen = set(); out = []
for x in [1,2,1,3,2,4]:
    if x in seen: continue
    seen.add(x); out.append(x)

# Example 29 — Early returns beat flags (function)
def find_first_even(nums):
    for n in nums:
        if n % 2 == 0: return n
    return None

# Example 30 — Matrix traversal (image ops)
img = [[0,1],[1,0]]
for r in range(len(img)):
    for c in range(len(img[0])):
        _ = img[r][c]

# Example 31 — Break big loops into generators
def iter_orders():
    for i in range(100):
        yield {"id": i}
for order in iter_orders():
    if order["id"] == 3: break

# Example 32 — While True with guarded break (daemon)
while True:
    # do work
    break  # replace with condition

# Example 33 — Using pathlib to loop files
from pathlib import Path
for p in Path(".").glob("*.py"):
    if p.name.startswith("test_"): continue

# Example 34 — Parallel iteration lengths (zip)
for a, b in zip([1,2,3], [10,20,30]):
    pass

# Example 35 — Loop with try/except around unit
for rec in [{"x":1},{"y":2}]:
    try:
        _ = rec["x"]
    except KeyError:
        continue

# Example 36 — Avoid mutate during iterate (copy first)
items = [1,2,3]; for_remove = items[:]
for it in for_remove:
    if it % 2 == 0: items.remove(it)

# Example 37 — else on while (no break)
n = 0
while n < 3:
    n += 1
else:
    finished_normally = True

# Example 38 — Flatten with nested comp (small sizes)
matrix = [[1,2],[3,4]]
flat = [x for row in matrix for x in row]

# Example 39 — Short-circuiting conditions
vals = [0, "", None, 5]
first_truthy = next((v for v in vals if v), None)

# Example 40 — Defer heavy work lazily (generator)
def iter_large(n):
    for i in range(n):
        yield i*i
seq = iter_large(1000000)

"""#Fonksiyonlar"""

# Example 1 — Pure function with type hints (pricing)
def apply_discount(price: float, pct: float) -> float:
    """Return price after discount. pct in [0,1]."""
    if not (0 <= pct <= 1): raise ValueError("pct must be in [0,1]")
    return price * (1 - pct)

# Example 2 — Docstring with examples (doctest-ready)
def slugify(text: str) -> str:
    """
    Lowercase and hyphenate.
    >>> slugify("Hello World")
    'hello-world'
    """
    return "-".join(text.lower().split())

# Example 3 — Keyword-only args (clarity)
def resize(*, width: int, height: int) -> tuple[int,int]:
    return (width, height)

# Example 4 — Positional-only args (3.8+)
def add(a, b, /) -> int:
    return a + b

# Example 5 — args/*kwargs passthrough (logging)
def log(event: str, /, *args, **kwargs) -> dict:
    return {"event": event, "args": args, "meta": kwargs}

# Example 6 — Default args (safe, immutable)
def greet(name: str, greeting: str = "Hello") -> str:
    return f"{greeting}, {name}!"

# Example 7 — Avoid mutable default trap
def append_safe(item, bucket=None):
    bucket = [] if bucket is None else bucket
    bucket.append(item); return bucket

# Example 8 — Return early, fail fast
def fetch_user(uid: int | None) -> dict | None:
    if uid is None: return None
    return {"id": uid}

# Example 9 — Single Responsibility
def mean(xs: list[float]) -> float:
    return sum(xs)/len(xs) if xs else float("nan")

# Example 10 — Dependency injection via params
def read_lines(read_fn) -> list[str]:
    return [line.rstrip("\n") for line in read_fn()]

# Example 11 — Higher-order function (strategy)
def apply_strategy(xs: list[int], fn) -> list[int]:
    return [fn(x) for x in xs]

# Example 12 — Closure (stateful counter)
def make_counter():
    count = 0
    def inc():
        nonlocal count
        count += 1
        return count
    return inc

# Example 13 — Decorator (timing lightweight)
import time
def timed(fn):
    def wrapper(*a, **k):
        t0 = time.perf_counter()
        try:
            return fn(*a, **k)
        finally:
            dt = (time.perf_counter() - t0)*1000
            wrapper.last_ms = dt  # attach metric
    return wrapper

# Example 14 — Recursion (tree sum)
def tree_sum(node):
    if node is None: return 0
    val, children = node
    return val + sum(tree_sum(ch) for ch in children)

# Example 15 — Tail recursion isn't optimized in Python
def fact(n: int) -> int:
    return 1 if n <= 1 else n * fact(n-1)

# Example 16 — Dataclass + method (domain)
from dataclasses import dataclass
@dataclass
class Invoice:
    net: float; tax_pct: float = 0.2
    def total(self) -> float: return self.net * (1 + self.tax_pct)

# Example 17 — LRU cache (idempotent expensive)
from functools import lru_cache
@lru_cache(maxsize=256)
def slow_lookup(key: str) -> str:
    return key[::-1]

# Example 18 — Single-dispatch (formatting)
from functools import singledispatch
@singledispatch
def render(x) -> str: return str(x)
@render.register
def _(x: list) -> str: return f"list[{len(x)}]"

# Example 19 — Validation layer
def ensure_nonempty(text: str) -> str:
    t = text.strip()
    if not t: raise ValueError("empty")
    return t

# Example 20 — Exceptions with context
class DomainError(Exception): ...
def divide(a: float, b: float) -> float:
    if b == 0: raise DomainError("division by zero")
    return a / b

# Example 21 — Generators as APIs
def read_chunks(text: str, size: int):
    for i in range(0, len(text), size):
        yield text[i:i+size]

# Example 22 — Context manager (resource mgmt)
from contextlib import contextmanager
@contextmanager
def opened(path: str, mode: str):
    f = open(path, mode, encoding="utf-8")
    try: yield f
    finally: f.close()

# Example 23 — Composition over inheritance
def pipeline(x, *funcs):
    for f in funcs: x = f(x)
    return x

# Example 24 — Pattern matching on result types
def http_status(msg: str) -> int:
    match msg:
        case "ok": return 200
        case "not_found": return 404
        case _: return 500

# Example 25 — Defensive public API
def parse_int(text: str) -> int | None:
    try: return int(text)
    except ValueError: return None

# Example 26 — Protocol-style duck typing (light)
def send_email(sender, to: str, subject: str, body: str) -> None:
    sender.send(to=to, subject=subject, body=body)

# Example 27 — Pure vs impure separation
def normalize(xs: list[int]) -> list[float]:
    total = sum(xs) or 1
    return [x/total for x in xs]

# Example 28 — Safe random seeding for tests
import random
def choose(xs: list[int]) -> int:
    random.seed(42); return random.choice(xs)

# Example 29 — CLI-friendly main guard
def main():
    print(apply_discount(100, 0.2))
if _name_ == "_main_":
    main()

# Example 30 — Pure function + unit-testable branch
def risk_bucket(amount: float) -> str:
    return "high" if amount >= 10000 else "low"

# Example 31 — Keyword-only validation envelope
def register_user(*, email: str, password: str) -> dict:
    if "@" not in email: raise ValueError("invalid email")
    return {"email": email, "ok": True}

# Example 32 — Callback contracts
def with_retry(fn, retries: int = 3):
    for _ in range(retries):
        try: return fn()
        except Exception: continue
    raise RuntimeError("exhausted")

# Example 33 — Partial functions
from functools import partial
mul10 = partial(lambda a,b: a*b, 10)

# Example 34 — Local functions for clarity
def compute_total(items: list[tuple[float,int]]) -> float:
    def line_total(price, qty): return price * qty
    return sum(line_total(p, q) for p, q in items)

# Example 35 — Safe rounding wrapper
def round_money(amount: float, digits: int = 2) -> float:
    return float(f"{amount:.{digits}f}")

# Example 36 — Strict argument typing by runtime checks
def ensure_list(xs) -> list:
    if not isinstance(xs, list): raise TypeError("list required")
    return xs

# Example 37 — Docstring with constraints
def normalize_email(email: str) -> str:
    """Lowercase and strip spaces; no validation here."""
    return email.strip().lower()

# Example 38 — Small reusable predicates
def is_adult(age: int) -> bool: return age >= 18

# Example 39 — Business rule as function
def can_approve_loan(income: float, score: int) -> bool:
    return income >= 3000 and score >= 700

# Example 40 — Orchestrator function
def run_etl(extract, transform, load) -> None:
    data = extract(); result = transform(data); load(result)

"""#BMW Yaş Grubu Fonksiyonu"""

AgeGroup = Literal["18-24","25-34","35-44","45-54","55+"]

class Customer(TypedDict, total=False):
    id: int
    name: str
    age: int
    model: str
    city: str
    is_vip: bool

def categorize_customers_by_age(customers: Iterable[Customer]) -> dict[AgeGroup, list[Customer]]:
    """
    Group BMW customers into age cohorts.
    Rules:
      - Ages <18 ignored; ages >= 100 flagged out-of-range and skipped.
      - Cohorts: 18–24, 25–34, 35–44, 45–54, 55+
    Returns a dict of cohorts to customer sublists (stable order).
    """
    from collections import defaultdict
    groups: dict[AgeGroup, list[Customer]] = defaultdict(list)

    def bucket(age: int) -> AgeGroup | None:
        if age < 18 or age >= 100:  # business rule / data hygiene
            return None
        if 18 <= age <= 24: return "18-24"
        if 25 <= age <= 34: return "25-34"
        if 35 <= age <= 44: return "35-44"
        if 45 <= age <= 54: return "45-54"
        return "55+"

    for cust in customers:
        age = cust.get("age")
        if not isinstance(age, int):
            continue  # skip bad records
        b = bucket(age)
        if b is None:
            continue
        groups[b].append(cust)

    # ensure all keys exist for reporting consistency
    for key in ("18-24","25-34","35-44","45-54","55+"):
        groups.setdefault(key, [])
    return dict(groups)

# --- Demo ---
if _name_ == "_main_":
    sample = [
        {"id": 1, "name": "Ali", "age": 23, "model": "3 Series", "city": "İstanbul", "is_vip": False},
        {"id": 2, "name": "Ayşe", "age": 31, "model": "X5", "city": "İzmir", "is_vip": True},
        {"id": 3, "name": "Deniz", "age": 47, "model": "5 Series", "city": "Ankara", "is_vip": False},
        {"id": 4, "name": "Ece", "age": 56, "model": "i4", "city": "Bursa", "is_vip": True},
        {"id": 5, "name": "Mert", "age": 16, "model": "1 Series", "city": "Adana", "is_vip": False},  # ignored
    ]
    grouped = categorize_customers_by_age(sample)
    for k, v in grouped.items():
        print(f"{k}: {len(v)} kayıt")

"""#Kurulum ve Yardımcı Fonksiyonlar

"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import math

np.random.seed(42)
pd.set_option('display.float_format', lambda x: f'{x:,.4f}')

# === Utilities ===
def trimmed_mean(a, trim_ratio=0.1):
    a = np.asarray(a, dtype=float)
    n = len(a); k = int(n * trim_ratio)
    a_sorted = np.sort(a)
    core = a_sorted[k:n-k] if k>0 else a_sorted
    return core.mean() if len(core) else np.nan

def welford_stats(iterable):
    n = 0; mean = 0.0; M2 = 0.0
    for x in iterable:
        n += 1
        delta = x - mean
        mean += delta / n
        delta2 = x - mean
        M2 += delta * delta2
    return {"n": n, "mean": mean, "var_pop": M2/n if n>0 else np.nan,
            "var_sample": M2/(n-1) if n>1 else np.nan}

"""#Ortalama (Mean) Örnekleri"""

# === 1) MEAN ===
x = np.array([12, 14, 18, 100])
print("Mean vs Median:", x.mean(), np.median(x))
print("Trimmed mean 0.1:", trimmed_mean(x, 0.1))

values = np.array([100, 200, 180])
weights = np.array([10, 40, 50])
print("Weighted avg:", np.average(values, weights=weights))

stream = np.random.lognormal(3.0, 0.6, size=10000)
print("Welford stats:", welford_stats(stream))

"""#Varyans (Variance) Örnekleri"""

# === 2) VARIANCE ===
a = np.array([10,12,13,15,16])
print("Var(pop):", np.var(a, ddof=0), "Var(sample):", np.var(a, ddof=1))

values = np.array([100, 110, 90, 95])
weights = np.array([50, 30, 15, 5])
w_mean = np.average(values, weights=weights)
w_var = np.average((values - w_mean)**2, weights=weights)
print("Weighted var:", w_var, "Weighted std:", math.sqrt(w_var))

"""#Dağılımlar"""

# === 3) DISTRIBUTIONS ===
norm = np.random.normal(100, 15, size=5000)
plt.hist(norm, bins=40)
plt.title("Normal dist")
plt.show()

logn = np.random.lognormal(mean=4.5, sigma=0.35, size=5000)
plt.hist(logn, bins=40)
plt.title("Lognormal dist")
plt.show()

"""# Korelasyon"""

# === 4) CORRELATION ===
x = np.linspace(0, 10, 300)
y = 2*x + np.random.normal(0,1,300)

print("Pearson:", pd.Series(x).corr(pd.Series(y)))
print("Spearman:", pd.Series(x).corr(pd.Series(y).rank()))

df = pd.DataFrame({
    "sales": np.random.lognormal(4.0, 0.3, 300),
    "ads":   np.random.normal(50, 10, 300),
    "price": np.random.normal(100, 8, 300)
})
print("Correlation matrix:\n", df.corr(numeric_only=True))

"""# Kullanılmış araç: KM-Fiyat Korelasyon"""

# === 5) USED CAR FUNCTION ===
def analyze_km_price_correlation(df, km_col="km", price_col="price", controls=None, plot=True):
    data = df[[km_col, price_col]].dropna()
    pearson = data[km_col].corr(data[price_col])
    spearman = data[km_col].corr(data[price_col].rank())
    slope, intercept = np.polyfit(data[km_col], data[price_col], 1)

    if plot:
        plt.scatter(data[km_col], data[price_col], s=10)
        xgrid = np.linspace(data[km_col].min(), data[km_col].max(), 100)
        plt.plot(xgrid, slope*xgrid+intercept)
        plt.title("KM vs Price — Scatter & Fit")
        plt.xlabel("KM"); plt.ylabel("Price")
        plt.show()

    return {"pearson": pearson, "spearman": spearman, "slope": slope}

"""# Demo: Sentetik araç datası ile test"""

rng = np.random.default_rng(123)
N = 200
year = rng.integers(2012, 2024, size=N)
km = (2025 - year)*rng.normal(15000, 3000, size=N).clip(5000, 40000)
price = 800_000 - (km*2.5) + (year-2012)*20000 + rng.normal(0, 25000, size=N)

df_cars = pd.DataFrame({"year":year, "km":km, "price":price})
print(df_cars.head())

result = analyze_km_price_correlation(df_cars)
print(result)