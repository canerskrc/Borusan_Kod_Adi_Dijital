# -*- coding: utf-8 -*-
"""borusan_day15_model_metrikleri.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18NKGt2zQoMLD3S5j5WIF5iy_POpXn_8q
"""

import pandas as pd
import numpy as np

df= pd.read_csv("Car_Tyres_Dataset.csv")

df["Selling Price"] = df["Selling Price"].str.replace(",", "").astype(float)
df["Original Price"] = df["Original Price"].str.replace(",", "").astype(float)

df = df.dropna(subset=["Rating"])

df["need_change"] = (df["Rating"] < 4 ).astype(int)

print(df["need_change"].value_counts())

from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split

X = df.drop(columns = ["Rating", "need_change"])
y = df["need_change"]

X_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.2, random_state=42, stratify = y)

categorical_cols = ["Brand ","Model","Submodel","Tyre Brand","Serial No.","Type","Size"]
numeric_cols = ["Selling Price","Original Price","Load Index"]
#PipeLine: kategorikler için OneHot, sayılar direkt geçsin
preprocessor = ColumnTransformer(
    transformers = [
        ("cat", OneHotEncoder(handle_unknown="ignore"),categorical_cols),
        ("num", "passthrough", numeric_cols)
    ]
)

model = Pipeline(steps=[
    ("preprocess", preprocessor),
    ("classifier", LogisticRegression(
        penalty="elasticnet", solver="saga", l1_ratio=0.5, max_iter= 5000
    ))
])

model.fit(X_train,y_train)

y_pred = model.predict(X_test)
y_prob = model.predict_proba(X_test)[:, 1]

from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score, f1_score,ConfusionMatrixDisplay

cm = confusion_matrix(y_test, y_pred)
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=['False', 'True'])
disp.plot()

print("Precision:", precision_score(y_test,y_pred))
print("Recall:", recall_score(y_test,y_pred))
print("F1 Score:", f1_score(y_test,y_pred))
print("Accuracy:", accuracy_score(y_test,y_pred))

"""Accuracy = ( TP + TN ) / TP + TN + FP + FN

Precision = TP / ( TP + FP ) model "bozuk lastik" dediğinde gerçekten bozuk olma olasılığı

Recall = TP / ( TP + FN ) Model bozuk lastiklerin %3 ünü yakalayabiliyor.

F1 Score = 2. (Precision. recall ) / ( Precision + Recall)

#Azure ML Üzerinden Model Karşılaştırma

Azure ML üzerinde model geliştirme işin % 20 lik kısmı.

deney takibi, versiyonlama, güvenlik, regülasyon uyumu, drift izleme.

Yapılan her deneme bir experimen run olarak saklanır.

Experiment klasör yapısı; run ise klasörün içindeki dosyalar gibidir.

Run içerisinde:

- Metrikler(accuracy, precision, recall...)

- Conf Matrix / ROC Eğrisi(görsel olarak kaydedilebiliyor)

- Parametreler ( max_depth, n_estimators)

- Kod snapshot ( model hangi kodla eğitildiğini kaydeder)

- Model çıktıları ( .pkl, .onnx)

!!! Microsoft Platformlarının Tamamında Her Run Tekrar Edilebilir Olmalı!!!

google vertex ai tarafında run genelde ( log + checkpoint) düzeyinde tutulur.

Azure ML'de ise run ( audit log + versiyonlama + governance ) kayıtlarıyla tutulur.

Registry ise başarılı bulunan run'ların saklandığı yer.
"""

from azureml.core import Run

run = Run.get_context()

run.log("Accuracy", accuracy_score)
run.log("Precision", precision_score)
run.log("Recall", recall_score)
run.log("F1 Score", f1_score)
run.log("Roc_auc", auc_acore)

#Azure ML Bağlantısı

from azureml.core import Workspace, Experiment, Run
from acxureml.core.dataset import Dataset

ws = Workspace.from_config()

# Yeni experiment

experiment = Experiment(workspace = ws, name="Battery_pack_lifetime_prediction")

dataset = Dataset.get_by_name(ws, "battery_dataset_v1")

df = dataset.to_pandas_dataframe()

X = df.drop(columns=["Target"])
y = df["Target"]


#metrik fonksiyonu

def log_metrics(run,model,X_train,X_test, y_train, y_test):
  model.fit(X_train,y_train)
  y_pred = model.predict(X_test)
  y_prob = model.predict_proba(X_test)[:,1]

  #metrikleri loglama
  run.log("Accuracy", accuracy_score)
  run.log("Precision", precision_score)
  run.log("Recall", recall_score)
  run.log("F1 Score", f1_score)
  run.log("Roc_auc", auc_acore)

  cm = confusion_matrix(y_test, y_pred)
  plt.figure(figsize=(4,4))
  run.log_image("Confusion Matrix", plot= plt)
  plt.close()

  return model

"""#Farklı modellerle Run"""

from sklearn.liner_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
import xgboost as xgb

#run 1 Logistic regression

with experiment.start_logging() as run:
  model.lr= LogisticRegression(penalty="elasticnet",solver="saga",l1_ratio=0.5, max_iter=5000)
  log_metrics(run, model_lr, X_train, y_train, X_test, y_test)


# Portability
# Azure ML asset'leri farklı workspace veya subscription'a taşımak için mekanizmalar sağlar.

#1- Register -> Download -> Register

from azureml.core import Model

model = Model(ws, name="Battery_Model")

model.download(target_dir="./outputs")

#2- Azure ML CLI v2 / SDK

az ml model export --name Battery_Model --version 3 --output ./model.json
az ml model import --file ./model.json --workspace other-workspace

#3-Cross subscription Sharing

# Örneğin development subscription'da eğittiğiniz modeli production subscription'a aktarabilirsiniz.


# Maliyet tasarrufu için auto shotdown ekleme

from azureml.core.compute import AmlCompute, ComputeTarget

compute_config = AmlCompute.provisioning_configuration(
    vm_size ="STANDARD_NC6",
    min_nodes=0, #idle durumunda 0 node ücret yok
    max_node = 4, # auto-scale en fazla 4 GPU node
    idle_seconds_before_scaledown = 300 # 5 dk boş kalınca kapat.

)